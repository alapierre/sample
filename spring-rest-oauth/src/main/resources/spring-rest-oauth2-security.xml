<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
    xmlns="http://www.springframework.org/schema/security" 
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    	   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
           http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
           ">
		
<!--    <http>
        <intercept-url pattern="/ui/**" access="ROLE_USER,ROLE_ADMIN" />        
        <form-login />
        <anonymous />
        <http-basic />
        <logout />
        <remember-me  />
    </http>     -->
        
    <authentication-manager alias="myAuthManager">
        <authentication-provider>
            <jdbc-user-service data-source-ref="dataSource" />
            <!--            <password-encoder ref="passwordEncoder" />-->
        </authentication-provider>
    </authentication-manager>
	
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"  />
    
    <!-- oauth2 configuration -->
    
    <!-- kontroler oauth -->
    
    <http pattern="/oauth/token"
          create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
    
    <!-- dostęp do zasobów -->
    
    <http pattern="/rest/**"
          auto-config='true'
          create-session="never"
          entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManagerForOauth">
        <anonymous enabled="false" />
        <intercept-url pattern="/rest/**" access="ROLE_ADMIN,ROLE_USER"/>
        
        <custom-filter ref="resourceServerFilter"  before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
    
    <!-- method security -->
    
    <global-method-security pre-post-annotations="enabled" proxy-target-class="true" jsr250-annotations="enabled">
        <expression-handler ref="oauthExpressionHandler" />
    </global-method-security>
    
    <oauth:expression-handler id="oauthExpressionHandler" />
    
    <!-- oauth beans -->
    
    <beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="restResource" />
    </beans:bean>
    
    <beans:bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="restResource/client" />
        <beans:property name="typeName" value="Basic" />
    </beans:bean>
    
    <beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    
    <beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager" />
    </beans:bean>
    
    <beans:bean id="accessDecisionManagerForOauth" class="org.springframework.security.access.vote.UnanimousBased" >
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <beans:bean class="org.springframework.security.access.vote.RoleVoter" />
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    
    <authentication-manager alias="clientAuthenticationManager" id="clientAuthenticationManager">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>
 
    <beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg  ref="clientDetails"/>
    </beans:bean>
 
    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="mobile-app"
                      authorized-grant-types="password,refresh_token"
                      authorities="ROLE_USER"/>
    </oauth:client-details-service>
    
    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>
 
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="supportRefreshToken" value="true" />
        <beans:property name="clientDetailsService" ref="clientDetails" />
    </beans:bean>
    
    <oauth:authorization-server
        client-details-service-ref="clientDetails"
        token-services-ref="tokenServices"
        user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit />
        <oauth:refresh-token  />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>
 
    <beans:bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <beans:property name="tokenServices" ref="tokenServices" />
    </beans:bean>
    
    <oauth:resource-server id="resourceServerFilter"
                   resource-id="restResource"
                   token-services-ref="tokenServices" />
    
</beans:beans>
